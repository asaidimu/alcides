#<type>(<scope>): <subject>
#
#<body>
#
#<footer>

# see https://www.conventionalcommits.org/en/v1.0.0/
# Type
#
# build    : Changes that affect the build system or external dependencies (example scopes : gulp, broccoli, npm)
# ci       : Changes to our CI configuration files and scripts (example scopes : Travis, Circle, BrowserStack, SauceLabs)
# docs     : Documentation only changes
# feat     : A new feature
# fix      : A bug fix
# perf     : A code change that improves performance
# refactor : A code change that neither fixes a bug nor adds a feature
# style    : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
# test     : Adding missing tests or correcting existing tests

# Subject
#
# The subject contains a succinct description of the change:
#
#   - use the imperative, present tense: "change" not "changed" nor "changes"
#   - don't capitalize the first letter
#   - no dot (.) at the end

# Body
#
# Just as in the subject, use the imperative, present tense: "change"
# not "changed" nor "changes". The body should include the motivation for
# the change and contrast this with previous behavior.
#
# Footer
#
# The footer should contain any information about Breaking Changes and is
# also the place to reference GitHub issues that this commit Closes.
#
# Breaking Changes should start with the word BREAKING CHANGE: with
# a space or two newlines. The rest of the commit message is then used for
# this.

# vim: ft=gitcommit:
