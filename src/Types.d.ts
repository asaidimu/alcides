declare module 'source-map'

declare interface TestError extends Error {
    id?: string
    code?: string
    stack?: string
    position?: {
        source: string
        line: number
        column: number
    }
}

declare interface SourcePosition {
    source: string
    column: number
    line: number
    name?: any
}

declare interface TestCase {
    id: string
    testCase: TestFunction
}

declare interface TestFunction {
    (state?: any): void | Promise<void>
}

declare interface TestHook {
    (state?: any): any
    id?: string
}

declare interface SetUpHook {
    (cb: TestHook): void
}

declare interface TearDownHook {
    (cb: TestHook): void
}

declare interface TestSuite {
    id: string
    tests: TestCase[]
    hooks: { [key: string]: TestHook }
}

declare type TestSuiteErrors = { [key: string]: Error }

declare interface TestSuiteResults {
    id: string
    results: Array<TestResult>
    errors: {
        test: Array<TestError> // errors generated by failing tests
        hook: Array<TestError> // errors generated by failing hooks
    }
}

declare interface TestResult {
    id: string
    duration: number
    passed: boolean
}

declare interface TestCaseRunnerParams extends TestCase {
    timeout: number
    hooks: { [key: string]: TestHook }
}

declare type TestCaseRunnerResults = [TestResult, TestError | null]

declare interface TestCollectorInterface {
    suite: { (id: string, cb: () => void): void }
    test: { (id: string, cb: TestFunction): void }
    setUp: { (cb: () => any | Promise<any>): void }
    tearDown: { (cb: (state?: any) => void | Promise<void>): void }
}

declare interface TestSuiteCreator {
    addTest: (id: string, testCase: TestFunction) => void
    addHook: (id: string, fun: TestHook) => void
    getTestSuite: () => TestSuite
    id: string
}

declare interface TestCollectorResults {
    suites: Array<TestSuite>
    errors: [TestError]
}

declare interface TestRunnerOutputResults {
    [key: string]: Array<TestResult> // collection of all test results sorted by suite.
}

declare interface TestRunnerOutput {
    [key: string]: any
    results: { [key: string]: Array<TestResult> }
    errors: Array<TestError>
}

declare interface Config {
    verbose: boolean
    include: string | Array<string>
    timeout: number
    workers: number
    parallel: boolean
    watch: boolean
    files: []
}

declare interface Arguments extends Config {
    [x: string]: unknown
    $0: string
    _: (string | number)[]
    help: unknown
    config: string
}
